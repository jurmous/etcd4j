plugins {
    id 'java'
    id 'maven'
    id 'signing'
    id 'osgi'
    id 'org.unbroken-dome.test-sets' version '1.2.0'
    id "com.bmuschko.vagrant" version "2.0"
    id 'eclipse'
}

compileJava {
    sourceCompatibility = 1.7
    targetCompatibility = 1.7
}

group = 'org.mousio'
version = '2.10.2-SNAPSHOT'

ext {
    isSnapshot = version.endsWith("-SNAPSHOT")
    isRelease = !isSnapshot

    mavenDeployUrl = isSnapshot ?
        'https://oss.sonatype.org/content/repositories/snapshots/' :
        'https://oss.sonatype.org/service/local/staging/deploy/maven2/'

    versions = [
        netty   : '4.1.0.CR7',
        jackson : '2.7.3',
        slf4j   : '1.7.21',
        junit   : '4.12',
    ]

    if(!project.hasProperty('sonatypeUsername') && !project.hasProperty('sonatypePassword')) {
        sonatypeUsername = "$System.env.CI_DEPLOY_USERNAME"
        sonatypePassword = "$System.env.CI_DEPLOY_PASSWORD"
    }
}

repositories {
    mavenLocal()
    mavenCentral()
}

testSets {
    integration
}

dependencies {
    compile "org.slf4j:slf4j-api:$versions.slf4j"
    compile "io.netty:netty-codec-http:$versions.netty"
    compile "io.netty:netty-handler:$versions.netty"
    compile "com.fasterxml.jackson.core:jackson-core:$versions.jackson"
    compile "com.fasterxml.jackson.core:jackson-databind:$versions.jackson"
    compile "com.fasterxml.jackson.core:jackson-annotations:$versions.jackson"
    compile "com.fasterxml.jackson.module:jackson-module-afterburner:$versions.jackson"

    testCompile "junit:junit:$versions.junit"
    testCompile "org.slf4j:slf4j-simple:$versions.slf4j"
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    from 'build/docs/javadoc'
    classifier = 'javadoc'
}

task sourcesJar(type: Jar) {
    from sourceSets.main.allSource
    classifier = 'sources'
}

artifacts {
    archives jar
    archives javadocJar
    archives sourcesJar
}

test { 
    testLogging { 
        events "started", "passed", "skipped", "failed", "standardOut", "standardError" 
    }
}

jar {
    baseName = "${project.name}"

    manifest.attributes['Bundle-Description'     ] = "${project.name}"
    manifest.attributes['Bundle-Name'            ] = "${project.name}"
    manifest.attributes['Bundle-SymbolicName'    ] = "${project.group}-${project.name}"
    manifest.attributes['Bundle-Version'         ] = project.version.replaceAll('-','.')
    manifest.attributes['Implementation-Title'   ] = project.name
    manifest.attributes['Implementation-Version' ] = project.version
    manifest.attributes['Implementation-Vendor'  ] = 'jurmous'
}

signing {
    required {
        isRelease && gradle.taskGraph.hasTask("uploadArchives")
    }

    sign configurations.archives
}

uploadArchives {
    repositories {
        mavenDeployer {
            beforeDeployment {
                MavenDeployment deployment -> signing.signPom(deployment)
            }

            repository(url: mavenDeployUrl) {
                authentication(userName: sonatypeUsername, password: sonatypePassword)
            }

            pom.project {
                name 'etcd4j'
                packaging 'jar'
                description 'etcd4j is a Java/Netty based etcd client'
                url 'https://github.com/jurmous/etcd4j'

                scm {
                    url 'scm:git@github.com:jurmous/etcd4j.git'
                    connection 'scm:git@github.com:jurmous/etcd4j.git'
                    developerConnection 'scm:git@github.com:jurmous/etcd4j.git'
                }

                licenses {
                    license {
                        name 'The Apache Software License, Version 2.0'
                        url 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                        distribution 'repo'
                    }
                }

                developers {
                    developer {
                        id 'jurmous'
                        name 'Jurriaan Mous'
                    }
                    developer {
                        id 'lburgazzoli'
                        name 'Luca Burgazzoli'
                    }
                }
            }
        }
    }
}

project.integration {
    dependsOn vagrantUp
    outputs.upToDateWhen { false }
}

tasks.withType(Test) {
    reports.html.destination = file("${reporting.baseDir}/${name}")
}
