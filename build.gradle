plugins {
    id 'java'
    id 'maven'
    id 'signing'
    id 'osgi'
    id "com.github.lburgazzoli.karaf" version '0.5.1'
    id 'net.researchgate.release' version '2.8.0'
    id "io.codearte.nexus-staging" version "0.20.0"
    id 'com.adarshr.test-logger' version '1.6.0'
    id "com.github.ben-manes.versions" version "0.20.0"
}

compileJava {
    sourceCompatibility = 1.7
    targetCompatibility = 1.7
}

group = 'org.mousio'

dependencyUpdates.resolutionStrategy {
    componentSelection { rules ->
        rules.all { ComponentSelection selection ->
            boolean rejected = ['alpha', 'beta', 'rc', 'cr', 'm', 'preview'].any { qualifier ->
                selection.candidate.version ==~ /(?i).*[.-]${qualifier}[.\d-]*/
            }
            if (rejected) {
                selection.reject('Release candidate')
            }
        }
    }
}

ext {
    isSnapshot = version.endsWith("-SNAPSHOT")
    isRelease  = !isSnapshot
    isCI       = Boolean.valueOf("$System.env.CI")
    isPR       = "false" != System.env.TRAVIS_PULL_REQUEST
    ciTasks    = isRelease ? ['clean', 'test'] : (isPR ? ['clean', 'test'] : ['clean', 'test', 'uploadArchives'])

    mavenDeployUrl = isSnapshot ?
        'https://oss.sonatype.org/content/repositories/snapshots/' :
        'https://oss.sonatype.org/service/local/staging/deploy/maven2/'

    versions = [
        netty               : '4.1.32.Final',
        jackson             : '2.9.9',
        jackson_databind    : '2.9.9',
        slf4j               : '1.7.25',
        junit               : '4.12',
        assertj             : '3.11.1',
        restito             : '0.9.3',
        logback             : '1.2.3',
        flat                : '0.6.0',
        testcontainers      : '1.10.5'
    ]

    osgiVersions = [
        slf4j   : "[1.7,1.8)",
        jackson : "[2.9,3.0)"
    ]

    if(!project.hasProperty('sonatypeUsername') && !project.hasProperty('sonatypePassword')) {
        sonatypeUsername = "$System.env.CI_DEPLOY_USERNAME"
        sonatypePassword = "$System.env.CI_DEPLOY_PASSWORD"
    }
}

repositories {
    mavenLocal()
    mavenCentral()
    jcenter()
}

configurations {
    karaf {
        extendsFrom compile
        exclude group: 'org.slf4j'
    }
}

dependencies {
    compile "org.slf4j:slf4j-api:$versions.slf4j"
    compile "io.netty:netty-codec-dns:$versions.netty"
    compile "io.netty:netty-codec-http:$versions.netty"
    compile "io.netty:netty-handler:$versions.netty"
    compile "io.netty:netty-resolver-dns:$versions.netty"
    compile "com.fasterxml.jackson.core:jackson-core:$versions.jackson"
    compile "com.fasterxml.jackson.core:jackson-databind:$versions.jackson_databind"
    compile "com.fasterxml.jackson.core:jackson-annotations:$versions.jackson"
    compile "com.fasterxml.jackson.module:jackson-module-afterburner:$versions.jackson"
    compile "com.github.wnameless:json-flattener:$versions.flat"

    testCompile "junit:junit:$versions.junit"
    testCompile "org.testcontainers:testcontainers:$versions.testcontainers"
    testCompile "com.xebialabs.restito:restito:$versions.restito"
    testCompile "org.assertj:assertj-core:$versions.assertj"
    testRuntime "ch.qos.logback:logback-classic:$versions.logback"
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    from 'build/docs/javadoc'
    classifier = 'javadoc'
}

task sourcesJar(type: Jar) {
    from sourceSets.main.allSource
    classifier = 'sources'
}

artifacts {
    archives jar
    archives javadocJar
    archives sourcesJar
}

testlogger {
    showStandardStreams false
    slowThreshold 30000
    theme 'mocha'
}

test { 
    systemProperty 'java.net.preferIPv4Stack' , 'true'
}

jar {
    baseName = "${project.name}"

    manifest {
        attributes['Bundle-Description'     ] = "${project.name}"
        attributes['Bundle-Name'            ] = "${project.name}"
        attributes['Bundle-SymbolicName'    ] = "${project.group}-${project.name}"
        attributes['Bundle-Version'         ] = project.version.replaceAll('-','.')
        attributes['Implementation-Title'   ] = project.name
        attributes['Implementation-Version' ] = project.version
        attributes['Implementation-Vendor'  ] = 'jurmous'

        // Tweak the OSGi imports so:
        // - slf4j do not define a specific import version
        // - add missing imports for Jackson Afterburner
        instruction 'Import-Package' , """
            org.slf4j;version=\"$osgiVersions.slf4j\",
            com.fasterxml.jackson.databind.ser;version=\"$osgiVersions.jackson\",
            com.fasterxml.jackson.databind.deser;version=\"$osgiVersions.jackson\",
            com.fasterxml.jackson.databind.ser.std;version=\"$osgiVersions.jackson\",
            com.fasterxml.jackson.databind.deser.std;version=\"$osgiVersions.jackson\",
            com.fasterxml.jackson.module.afterburner.ser;version=\"$osgiVersions.jackson\",
            com.fasterxml.jackson.module.afterburner.deser;version=\"$osgiVersions.jackson\",
            *
        """
    }
}

karaf {
    features {
        includeProject = true
        feature {
            name = 'etcd4j'
            configurations 'karaf'
        }
    }
}

signing {
    required {
        isRelease && gradle.taskGraph.hasTask("uploadArchives")
    }

    sign configurations.archives
}

// *****************************************************************************
// Publish to Sonatype OSS
// *****************************************************************************

uploadArchives {
    repositories {
        mavenDeployer {
            beforeDeployment {
                MavenDeployment deployment -> signing.signPom(deployment)
            }

            repository(url: mavenDeployUrl) {
                authentication(userName: sonatypeUsername, password: sonatypePassword)
            }

            pom.project {
                name 'etcd4j'
                packaging 'jar'
                description 'etcd4j is a Java/Netty based etcd client'
                url 'https://github.com/jurmous/etcd4j'

                scm {
                    url 'scm:git@github.com:jurmous/etcd4j.git'
                    connection 'scm:git@github.com:jurmous/etcd4j.git'
                    developerConnection 'scm:git@github.com:jurmous/etcd4j.git'
                }

                licenses {
                    license {
                        name 'The Apache Software License, Version 2.0'
                        url 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                        distribution 'repo'
                    }
                }

                developers {
                    developer {
                        id 'jurmous'
                        name 'Jurriaan Mous'
                    }
                    developer {
                        id 'lburgazzoli'
                        name 'Luca Burgazzoli'
                    }
                }
            }
        }
    }
}

release {
    tagTemplate = 'release-${version}'
}

tasks.withType(Test) {
    reports.html.destination = file("${reporting.baseDir}/${name}")
}

task ci(dependsOn: project.ciTasks) {
}

task close(dependsOn: closeAndPromoteRepository) {
}

// *****************************************************************************
//
// *****************************************************************************

afterReleaseBuild.dependsOn uploadArchives
